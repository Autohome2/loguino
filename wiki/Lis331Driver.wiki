#summary The LIS331 Driver can be used to communicate with the LIS331 accelerometer over the I2C bus with an Arduino.

= Overview = 

This driver provides access to the [http://www.st.com/internet/com/TECHNICAL_RESOURCES/TECHNICAL_LITERATURE/DATASHEET/CD00250937.pdf LIS331HH] accelleromater with a level of abstraction above the I2C interface, enabling users with no knowledge of the I2C bus to access the sensor data easily without caring about the underlying communication required.

The [http://www.st.com/internet/com/TECHNICAL_RESOURCES/TECHNICAL_LITERATURE/DATASHEET/CD00250937.pdf LIS331HH] is an ultra low-power high performance high full-scale three axes linear accelerometer belonging to the “nano” family, with digital I2C/SPI serial interface standard output.

The device features ultra low-power operational modes that allow advanced power saving and smart sleep to wake-up functions.

The [http://www.st.com/internet/com/TECHNICAL_RESOURCES/TECHNICAL_LITERATURE/DATASHEET/CD00250937.pdf LIS331HH] has dynamically user selectable full scales of ±6g/±12g/±24g and it is capable of measuring accelerations with output data rates from 0.5 Hz to 1 kHz. The self-test capability allows the user to check the functioning of the sensor in the final application.

The device contains 2 indipendent interrupt engines able to recognize dedicated inertial events. Thresholds and timing of interrupt generators are programmable by the end user on the fly.

= Wiring =

The scceleromter is connected using the I2C interface, it is also possible to query it using the SPI interface, however loguino uses the SPI interface to communicate with the SD card, and the I2C bus seemed cleaner in general. The [Lis331Wiring LIS331 Wiring] page details how the accelerometer is wired up to the Arduino.

= Synopsis = 

{{{
#include <LIS331.h>
byte state;
LIS331 lis;

lis.i2caddress=LR_SA0_HIGH;
state=lis.getPowerStatus();
if (state==LR_POWER_OFF){
    lis.setPowerStatus(LR_POWER_NORM);
}
if (!lis.getXEnable()){
    lis.setXEnable(true);
}
while (!lis.statusHasXDataAvailable())
{
delay(1);
}

int16_t val;
lis.getXValue(&val);
Serial.print("X Axis Value: ");
Serial.println(val,DEC);

}}}